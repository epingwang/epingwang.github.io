<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[EpingWang's Blog]]></title>
  <link href="http://epingwang.github.io/atom.xml" rel="self"/>
  <link href="http://epingwang.github.io/"/>
  <updated>2014-06-19T17:52:21+08:00</updated>
  <id>http://epingwang.github.io/</id>
  <author>
    <name><![CDATA[Eping Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[小试Auto Layout——VFL篇]]></title>
    <link href="http://epingwang.github.io/blog/2014/06/13/xiao-shi-auto-layout-vflpian/"/>
    <updated>2014-06-13T18:47:42+08:00</updated>
    <id>http://epingwang.github.io/blog/2014/06/13/xiao-shi-auto-layout-vflpian</id>
    <content type="html"><![CDATA[<h3>为什么要AutoLayout</h3>

<p>从iOS6开始，移动端开始支持AutoLayout。与传统的Layout方法相比，AutoLayout不再使用Origin+Size的方式描述View的位置和大小，而是使用<code>Constraints</code>（约束）来描述。</p>

<p>AutoLayout的优点:</p>

<ul>
<li>iOS设备越来越多，iPhone4/5/6、iPad、甚至以后的AppleTV、iWatch，其分辨率都是不一样的，要做分辨率适配，旧的方法已经不再适合，AutoLayout提供了一个适配不同分辨率的方式。</li>
<li>在iOS8中，View的尺寸可以通过设备旋转、Universal适配、SplitView展开/折叠等途径不断改变，就要求subview的位置和尺寸适应parent view。</li>
<li>将View的布局计算交给View自己，而不需要在ViewController中控制，更加符合MVC。</li>
</ul>


<h3>为什么要用VFL</h3>

<p>VFL，即Visual Format Language，是用code编码进行AutoLayout的方式。</p>

<p>VFL的优点:</p>

<ul>
<li>编写简单，工作量少，代码可读性强，方便维护。</li>
<li>由于处理的是字符串，所以符合OC的动态特性。</li>
<li>程序员忍受得了去IB拖积木吗？</li>
</ul>


<h3>VFL语法</h3>

<!--more-->


<h4>创建一个VFL约束:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">NSLayoutConstraint</span>
</span><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nf">constraintsWithVisualFormat:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">format</span> <span class="nf">options:</span><span class="p">(</span><span class="n">NSLayoutFormatOptions</span><span class="p">)</span><span class="nv">opts</span> <span class="nf">metrics:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">metrics</span> <span class="nf">views:</span><span class="p">(</span><span class="n">NSDictionary</span> <span class="o">*</span><span class="p">)</span><span class="nv">views</span><span class="p">;</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中:</p>

<ul>
<li>@param format: VFL语句</li>
<li>@param opts: 约束方式，见后续</li>
<li>@param metrics: 约束中固定值的字典，Value必须是NSNumber</li>
<li>@param views: 约束语句中用到的view的字典</li>
<li>@return 返回一个NSArray，其中Object为<code>NSLayoutConstraint</code>类型</li>
</ul>


<p>其返回值用这个方法接收:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">UIView</span> <span class="nl">(UIConstraintBasedLayoutInstallingConstraints)</span>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">addConstraints:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">constraints</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">6</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>NSLayoutFormatOptions</h4>

<p>在写VFL时，遇到一个问题，我很难描述一个View需要居中的约束。</p>

<p>通过计算左右边界与SuperView边界的距离是可以实现的，但很明显背离了VFL的初衷。</p>

<p>查阅文档后发现这些选项就在<code>opts</code>这个参数中，不但可以设置居中，也可以设计约束的参考位置，以及对其方式，可以用位运算选择多个方式。</p>

<h4>一行VFL语句:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="n">orientation</span><span class="o">&gt;:</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="n">superview</span><span class="o">&gt;&lt;</span><span class="n">connection</span><span class="o">&gt;</span><span class="p">)</span><span class="o">?</span>
</span><span class='line'><span class="o">&lt;</span><span class="n">view</span><span class="o">&gt;</span><span class="p">(</span><span class="o">&lt;</span><span class="n">connection</span><span class="o">&gt;&lt;</span><span class="n">view</span><span class="o">&gt;</span><span class="p">)</span><span class="o">*</span>
</span><span class='line'><span class="p">(</span><span class="o">&lt;</span><span class="n">connection</span><span class="o">&gt;&lt;</span><span class="n">superview</span><span class="o">&gt;</span><span class="p">)</span><span class="o">?</span>
</span></code></pre></td></tr></table></div></figure>


<p>例如:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="s">@&quot;V:|-vSpace-[_touchImageView(==avatarHeight)]-vPad-[_nameTextField(==textFieldHeight)]&quot;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li><p>orientation:</p>

<p>  <code>
V: 纵向约束
H: (默认)横向约束
</code></p></li>
<li>superview: <code>|</code></li>
<li><p>view:</p>

<p>  <code>[&lt;viewname&gt;(&lt;predicateListWithParens)?]</code></p></li>
<li><p>connection:</p>

<p>  <code>-padding-</code>，其中padding可以使matrics字典中的某一项，也可以是一个数值，如<code>-20-</code></p></li>
<li><p>predicateListWithParens:</p>

<p>  <code>(&lt;predicate&gt;(,&lt;predicate&gt;)*)</code>，一组predicate，用逗号隔开</p></li>
<li><p>predicate:</p>

<p>  <code>(&lt;relation&gt;)?(&lt;objectOfPredicate&gt;)(@&lt;priority&gt;)?</code>，例如(>=vPad@100)，意义为宽/高大于vPad（metrics字典中一项），优先级为100</p></li>
</ul>


<h4>注意事项:</h4>

<ul>
<li>一行VFL中，所有被约束的View一定是添加约束View的SubView</li>
<li><p>被约束的View要设置</p>

<p>  <code>
  [someView setTranslatesAutoresizingMaskIntoConstraints:NO];]
 </code></p></li>
<li><p>使用VFL之后，系统不再调用这个方法</p>

<p>  <code>
  -(void) setFrame:(CGRect)frame
 </code></p></li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session 214 View Controller Advancements for iOS8 笔记]]></title>
    <link href="http://epingwang.github.io/blog/2014/06/11/session-214-view-controller-advancements-for-ios8-bi-ji/"/>
    <updated>2014-06-11T15:52:27+08:00</updated>
    <id>http://epingwang.github.io/blog/2014/06/11/session-214-view-controller-advancements-for-ios8-bi-ji</id>
    <content type="html"><![CDATA[<p>Session 214</p>

<p>Bruce D. Nilo</p>

<h2>OverView</h2>

<ul>
<li>A brief discussion about UIKit&rsquo;s new Adaptive APIs</li>
<li>New UISplitViewController features</li>
<li>Some new ways to condense and hide bars</li>
<li>Presentations and popovers</li>
<li>New API that uses transition coordinators</li>
<li>Coordinate spaces</li>
</ul>


<!--more-->


<h2>Support for Adaptive User Interfaces</h2>

<p>Universal App中，相同的页面会展示为不同的Layout</p>

<p>在iOS8之前，Layout取决于</p>

<ul>
<li>设备类型      Device type</li>
<li>设备方向      Interface Orientation</li>
<li>Window大小  Size</li>
</ul>


<p>iOS8之后:</p>

<ul>
<li>Traits and trait collections</li>
<li>Size</li>
</ul>


<h3>什么是 &ldquo;trait collection&rdquo;?</h3>

<p>Trait collection 是一个trait的集合</p>

<p>例如: 在一个竖屏的 iPhone5s 中</p>

<table>
<thead>
<tr>
<th>Trait </th>
<th> Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>horizontalSizeClass </td>
<td> Compact</td>
</tr>
<tr>
<td>verticalSizeClass </td>
<td> Regular</td>
</tr>
<tr>
<td>userInterfaceIdiom </td>
<td> Phone</td>
</tr>
<tr>
<td>displayScale </td>
<td> 2.0</td>
</tr>
</tbody>
</table>


<h3>什么是 &ldquo;size class&rdquo;?</h3>

<ul>
<li>Size class 是简单定义<code>可用空间</code>的一个 <code>trait</code></li>
<li>可以定义在Horizontal方向和Vertical方向是Compact or Regular</li>
</ul>


<h3>Trait Environments</h3>

<p>在iOS8中, <code>UIView</code>和<code>UIViewController</code>均 conforms <code>&lt;UITraitEnvironment&gt;</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@protocol</span> <span class="nc">UITraitEnvironment</span> <span class="o">&lt;</span><span class="n">NSObject</span><span class="o">&gt;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">UITraitCollection</span> <span class="o">*</span><span class="n">traitCollection</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">traitCollectionDidChange:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">previousTraitCollection</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>并不是每个View都有自己的TraitCollection，当获取<code>Leaf View</code>的<code>traitCollection</code>时，会沿着View的hierarchy找到最近的traitCollection</p>

<h2>Split View Controller</h2>

<p>UISplitViewControllers can now be used on the phone</p>

<p>新增了这个方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@interface</span> <span class="nc">UISplitViewController</span> : <span class="nc">UIViewController</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">,</span> <span class="n">getter</span><span class="o">=</span><span class="n">isCollapsed</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">collapsed</span>  <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="k">@end</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Expanded split view controller</h4>

<p><img class="center" src="http://epingwang.github.io/images/2014/06/SplitViewController.jpg"></p>

<h4>Collapsed split view controller</h4>

<p><img class="center" src="http://epingwang.github.io/images/2014/06/SplitViewControllerCollapsed.jpg"></p>

<h3>在ViewController中添加SplitViewcontroller，并启用Collapse</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">svc</span><span class="p">.</span><span class="n">preferredDisplayMode</span> <span class="o">=</span> <span class="n">UISplitViewControllerDisplayModeAllVisible</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h3>控制分栏的宽度</h3>

<p>通过以下几个属性</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">preferredPrimaryColumnWidthFraction</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">minimumPrimaryColumnWidth</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">maximumPrimaryColumnWidth</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span><span class='line'><span class="k">@property</span><span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span><span class="n">readonly</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">primaryColumnWidth</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Condesing Bars</h2>

<p>现在隐藏NavigationBar和ToolBar变得相当简单，只需要以下几个属性</p>

<p>自动隐藏:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">condensesBarsOnSwipe</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">condensesBarsWhenKeyboardAppears</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">hidesBarsWhenVerticallyCompact</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">hidesBarsOnTap</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">,</span> <span class="n">assign</span><span class="p">)</span> <span class="n">UITapGestureRecognizer</span> <span class="o">*</span><span class="n">barHideGestureRecognizer</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>手动控制:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readwrite</span><span class="p">,</span> <span class="n">assign</span><span class="p">,</span> <span class="n">getter</span> <span class="o">=</span> <span class="n">isNavigationBarCondensed</span><span class="p">)</span> <span class="kt">BOOL</span> <span class="n">navigationBarCondensed</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>



]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session 216 Building Adaptive Apps With UIKit]]></title>
    <link href="http://epingwang.github.io/blog/2014/06/10/session-216-building-adaptive-apps-with-uikit/"/>
    <updated>2014-06-10T17:32:04+08:00</updated>
    <id>http://epingwang.github.io/blog/2014/06/10/session-216-building-adaptive-apps-with-uikit</id>
    <content type="html"><![CDATA[<p>Session 216</p>

<p>Jacob Xiao</p>

<p>使用UIKit 创建 Universial App</p>

<!--more-->


<h2>Summary</h2>

<ul>
<li>Adaptive Concepts</li>
<li>View Controllers</li>
<li>Interface Builder</li>
</ul>


<h3>Size Classes</h3>

<p>之前区分设备方向，使用 <code>UIInterfaceOrientation</code>(iPhone) 和 <code>UIUserInterfaceIdiom</code>(iPad)</p>

<p>现在用 <code>Size Classes</code> 取代</p>

<p>在iPad上:</p>

<ul>
<li>Potrait: Regular Horizontal &amp; Regular Vertical</li>
<li>Landscape: Regular Horizontal &amp; Regular Vertical</li>
</ul>


<p>在iPhone上:</p>

<ul>
<li>Potrait: Compact Horizontal &amp; Regular Vertical</li>
<li>Landscape: Compact Hotizontal &amp; Compact Vertical</li>
</ul>


<h3>UITraitCollection</h3>

<h4>成员:</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">UIUserInterfaceSizeClass</span> <span class="n">horizontalSizeClass</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">UIUserInterfaceSizeClass</span> <span class="n">verticalSizeClass</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">CGFloat</span> <span class="n">displayScale</span><span class="p">;</span>
</span><span class='line'><span class="k">@property</span> <span class="p">(</span><span class="n">nonatomic</span><span class="p">,</span> <span class="n">readonly</span><span class="p">)</span> <span class="n">UIUserInterfaceIdiom</span> <span class="n">userInterfaceIdiom</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Trait Environments</h4>

<ul>
<li>UIScreen</li>
<li>UIWindow</li>
<li>UIViewController</li>
<li>UIView</li>
<li>UIPresentationController</li>
</ul>


<p>所有层级共享同样的<code>UITraitCollection</code></p>

<p>当<code>TraitCollection</code>发生改变时，触发</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">traitCollectionDidChange:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">previousTraitCollection</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>重写这个方法来响应方向变化事件</p>

<h4>Trait Collections</h4>

<p>可以自己创建<code>UITraitCollection</code></p>

<p>可适用于横屏播放器之类的界面</p>

<p>可用于UITraitCollection的比较</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="n">UITraitCollection</span> <span class="o">*</span><span class="n">collection</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">traitCollection</span><span class="p">;</span>
</span><span class='line'><span class="n">UITraitCollection</span> <span class="o">*</span><span class="n">newCollection</span> <span class="o">=</span> <span class="p">[</span><span class="n">UITraitCollection</span> <span class="nl">traitCollectionWithHorizontalSizeClass:</span><span class="n">UIUserInterfaceSizeClassCompact</span><span class="p">];</span>
</span><span class='line'><span class="p">[</span><span class="n">collection</span> <span class="nl">containsTraitsInCollection:</span><span class="n">newCollection</span><span class="p">];</span>
</span></code></pre></td></tr></table></div></figure>


<p>可以合并<code>UITraitCollection</code></p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nf">traitCollectionWithTraitsFromCollections:</span><span class="p">(</span><span class="n">NSArray</span> <span class="o">*</span><span class="p">)</span><span class="nv">traitCollections</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>其中 <code>Compact</code> + <code>Regular</code> = <code>Regular</code></p>

<h3>Appearance Proxy</h3>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span><span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">appearanceForTraitCollection:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">trait</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<ul>
<li>Customize views for different traits</li>
<li>UIImage 可以响应这个方法，返回different version of image</li>
<li>UIImageAssets</li>
</ul>


<h3>Adaptive View Controllers</h3>

<h4>Split View Controller</h4>

<p>现在Split View Controller 是Universal的</p>

<h4>生命周期</h4>

<p>Setup开始时:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willTransitionToTraitCollection:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">newCollection</span> <span class="nf">withTransitionCoordinator:</span><span class="p">(</span><span class="kt">id</span><span class="o">&lt;</span><span class="n">UIViewControllerTransitionCoordinator</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">coordinator</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>在这个方法可以自定义动画，并执行completion block，其顺序在下面方法之后。</p>

<p>Setup结束时:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">traitCollectionDidChange:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">previousTraitCollection</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<h4>Showing View Controllers</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">navigationController</span> <span class="nl">pushViewController:</span><span class="p">...];</span>
</span></code></pre></td></tr></table></div></figure>


<p>这个机制被废弃</p>

<p>取而代之的是</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">vc</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">showDetailViewController:</span><span class="p">(</span><span class="n">UIViewController</span> <span class="o">*</span><span class="p">)</span><span class="nv">vc</span> <span class="nf">sender:</span><span class="p">(</span><span class="kt">id</span><span class="p">)</span><span class="nv">sender</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>这两个方法总是保证，无论当前ViewController被包含在<code>NavigationController</code>, <code>SplitViewController</code>, 还是没有被包含在任何ViewController中，都会有正确的表现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session 202 What's New in Cocoa Touch 笔记]]></title>
    <link href="http://epingwang.github.io/blog/2014/06/10/session-202-whats-new-in-cocoa-touch-bi-ji/"/>
    <updated>2014-06-10T15:24:54+08:00</updated>
    <id>http://epingwang.github.io/blog/2014/06/10/session-202-whats-new-in-cocoa-touch-bi-ji</id>
    <content type="html"><![CDATA[<p>Session 202</p>

<p>Luke Hiesterman</p>

<p>Core idea iOS8 &ndash;> Adaptivity</p>

<!--more-->


<h2>Adaptive Layout</h2>

<p>Orientations, sizes, and margins</p>

<h3>Adaptive Interface Orientation</h3>

<p>Layout 不再关心设备的方向以及设备的类型，而只关心屏幕画布的尺寸</p>

<p>范例: UITraitCollection
成员属性:</p>

<ul>
<li>horizontalSizeClass</li>
<li>displayScale</li>
<li>userInterfaceIdiom</li>
<li>verticalSizeClass</li>
</ul>


<p>UIViewController Conforms to <code>UITraitEnviroment</code>
当屏幕尺寸变化（设备方向改变）时，会调用</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">traitCollectionDidChange:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">previousTraitCollection</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>  <span class="c1">// 使用Layout设置CollectionView</span>
</span><span class='line'>    <span class="n">UITraitCollection</span> <span class="o">*</span><span class="n">currentTraits</span> <span class="o">=</span> <span class="n">self</span><span class="p">.</span><span class="n">traitCollection</span><span class="p">;</span>
</span><span class='line'>    <span class="n">UICollectionViewLayout</span> <span class="o">*</span><span class="n">newLayout</span> <span class="o">=</span> <span class="n">currentTraits</span><span class="p">.</span><span class="n">horizontalSizeClass</span> <span class="o">==</span> <span class="n">UIUserInterfaceSizeClassCompact</span> <span class="o">?</span> <span class="n">self</span><span class="p">.</span><span class="n">squaresLayout</span> <span class="o">:</span> <span class="n">self</span><span class="p">.</span><span class="n">rectanglesLayout</span><span class="p">;</span>
</span><span class='line'>    <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">collectionView</span> <span class="nl">setCollectionViewLayout:</span><span class="n">newLayout</span> <span class="nl">animated:</span><span class="n">YES</span><span class="p">];</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Adaptive Margins</h3>

<p>UIViewController 的属性:</p>

<ul>
<li>bottomLayoutGuide</li>
<li>topLayoutGuide</li>
<li>leftLayoutGuide</li>
<li>rightLayoutGuide</li>
</ul>


<p>可以确定四个边界（不用计算Navigation、ToolBar的高度）</p>

<p>See More: <a href="http://epingwang.github.io/blog/2014/06/10/session-216-building-adaptive-apps-with-uikit/">Building Adaptive Apps with UIKit</a></p>

<h3>Adaptive View Controllers</h3>

<h4>Rotation Deprecations</h4>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willRotateToInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">toInterfaceOrientation</span> <span class="nf">duration:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">duration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">willAnimateFirstHalfOfRotationToInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">toInterfaceOrientation</span> <span class="nf">duration:</span><span class="p">(</span><span class="n">NSTimeInterval</span><span class="p">)</span><span class="nv">duration</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">didRotateFromInterfaceOrientation:</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nv">fromInterfaceOrientation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="kt">BOOL</span><span class="p">)</span><span class="nf">shouldAutomaticallyForwardRotationMethods</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">UIInterfaceOrientation</span><span class="p">)</span><span class="nf">interfaceOrientation</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nf">rotatingFooterView</span><span class="p">;</span>
</span><span class='line'>
</span><span class='line'><span class="k">-</span><span class="p">(</span><span class="n">UIView</span> <span class="o">*</span><span class="p">)</span><span class="nf">rotatingHeaderView</span><span class="p">;</span>
</span></code></pre></td></tr></table></div></figure>


<p>取而代之的新方法:</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="kt">void</span><span class="p">)</span><span class="nf">viewWillTransitionToSize:</span><span class="p">(</span><span class="n">CGSize</span><span class="p">)</span><span class="nv">size</span> <span class="nf">withTransitionCoordinator:</span><span class="p">(</span><span class="kt">id</span> <span class="o">&lt;</span><span class="n">UIViewControllerTransitionCoordinator</span><span class="o">&gt;</span><span class="p">)</span><span class="nv">coordinator</span> <span class="n">NS_AVAILABLE_IOS</span><span class="p">(</span><span class="mi">8</span><span class="n">_0</span><span class="p">);</span>
</span></code></pre></td></tr></table></div></figure>


<h3>Adaptive View Controller Hierarchies</h3>

<h4>UISplitViewController</h4>

<p>Primary &ndash; Secondary (TableView &ndash; Detail) 视图</p>

<p>现在可以用<code>Split View Controller - Detail View Controller</code></p>

<ul>
<li>全设备支持</li>
<li>处理 <code>primary-secondary</code> 样式的视图交互</li>
<li>增强的可定制性</li>
</ul>


<p>See more: <a href="">View Controller Advancements in iOS8</a></p>

<h3>Adaptive Presentations</h3>

<p>适应不同设备的 <code>弹出视图(Popovers)</code>、<code>SearchBar</code>、<code>警告(Alerts)</code></p>

<h4>Popovers</h4>

<p>iPad上不再需要<code>UIPopOverController</code>，<code>Popover</code>以后做为UIViewController的Style使用
在iPhone上显示为PresentViewController样式</p>

<h4>Search Results</h4>

<p><code>UISearchDisplayController</code> replaced by</p>

<p><code>UISearchController</code> &ndash;> <code>UIViewController</code> subclass</p>

<ul>
<li><p>可以使用UIViewController的一切特性</p></li>
<li><p>可以定制UISearchController的UI</p></li>
</ul>


<h4>Alerts</h4>

<p><code>UIAlertController</code> replaces <code>UIAlertView</code> and <code>UIActionSheet</code></p>

<p>UIAlertController 也是 UIViewController 的 subclass</p>

<p>See More: <a href="">A Look Inside Presentation Controllers</a></p>

<h2>Testing with the iOS Simulator</h2>

<p>Simulator 可以直接调整 Size</p>

<ul>
<li>Resizeable iPhone</li>
<li>Resizeable iPad</li>
</ul>


<h2>Visual Effects</h2>

<p>UIVisualEffectView</p>

<p>可以接收<code>UIEffect</code>，来影响View及Subview上的Layer</p>

<ul>
<li>UIBlurEffect</li>
<li>UIVibrancyEffect</li>
</ul>


<h2>Image Assets</h2>

<p>直接返回正确的图片</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">+</span> <span class="p">(</span><span class="n">UIImage</span> <span class="o">*</span><span class="p">)</span><span class="nf">imageNamed:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">name</span>
</span><span class='line'>               <span class="nf">inBundle:</span><span class="p">(</span><span class="n">NSBundle</span> <span class="o">*</span><span class="p">)</span><span class="nv">bundle</span>
</span><span class='line'><span class="nf">compatibleWithTraitCollection:</span><span class="p">(</span><span class="n">UITraitCollection</span> <span class="o">*</span><span class="p">)</span><span class="nv">traitCollection</span>
</span></code></pre></td></tr></table></div></figure>


<h2>Condensing Bars</h2>

<p>当用户滚动Scroll时，Navigation Bar 变小</p>

<p>See More: <a href="">Creating Custom iOS User Interfaces</a></p>

<h2>Self-sizing Table Cells</h2>

<p><strong> cell的 <code>height</code> 将无需在 <code>heightForRowAtIndexPath:</code> 中实现 </strong></p>

<p>cell 可以自己计算它的尺寸</p>

<figure class='code'><figcaption><span></span></figcaption><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
<span class='line-number'>2</span>
<span class='line-number'>3</span>
<span class='line-number'>4</span>
<span class='line-number'>5</span>
<span class='line-number'>6</span>
<span class='line-number'>7</span>
<span class='line-number'>8</span>
<span class='line-number'>9</span>
<span class='line-number'>10</span>
<span class='line-number'>11</span>
<span class='line-number'>12</span>
<span class='line-number'>13</span>
<span class='line-number'>14</span>
<span class='line-number'>15</span>
<span class='line-number'>16</span>
<span class='line-number'>17</span>
<span class='line-number'>18</span>
</pre></td><td class='code'><pre><code class='objc'><span class='line'><span class="k">-</span> <span class="p">(</span><span class="n">instancetype</span><span class="p">)</span><span class="nf">initWithStyle:</span><span class="p">(</span><span class="n">UITableViewCellStyle</span><span class="p">)</span><span class="nv">style</span> <span class="nf">reuseIdentifier:</span><span class="p">(</span><span class="n">NSString</span> <span class="o">*</span><span class="p">)</span><span class="nv">reuseIdentifier</span>
</span><span class='line'><span class="p">{</span>
</span><span class='line'>    <span class="n">self</span> <span class="o">=</span> <span class="p">[</span><span class="n">super</span> <span class="nl">initWithStyle:</span><span class="n">style</span> <span class="nl">reuseIdentifier:</span><span class="n">reuseIdentifier</span><span class="p">];</span>
</span><span class='line'>    <span class="k">if</span> <span class="p">(</span><span class="n">self</span><span class="p">)</span> <span class="p">{</span>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">contentView</span> <span class="nl">addConstraints:</span><span class="p">[</span><span class="n">NSLayoutConstraint</span>
</span><span class='line'>                                          <span class="nl">constraintsWithVisualFormat:</span><span class="s">@&quot;V:|-myTextView-|&quot;</span>
</span><span class='line'>                                          <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                          <span class="nl">metrics:</span><span class="nb">nil</span>
</span><span class='line'>                                            <span class="nl">views:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">_myTextView</span><span class="p">)]];</span>
</span><span class='line'>
</span><span class='line'>        <span class="p">[</span><span class="n">self</span><span class="p">.</span><span class="n">contentView</span> <span class="nl">addConstraints:</span><span class="p">[</span><span class="n">NSLayoutConstraint</span>
</span><span class='line'>                                          <span class="nl">constraintsWithVisualFormat:</span><span class="s">@&quot;H:|-myTextView-|&quot;</span>
</span><span class='line'>                                          <span class="nl">options:</span><span class="mi">0</span>
</span><span class='line'>                                          <span class="nl">metrics:</span><span class="nb">nil</span>
</span><span class='line'>                                            <span class="nl">views:</span><span class="n">NSDictionaryOfVariableBindings</span><span class="p">(</span><span class="n">_myTextView</span><span class="p">)]];</span>
</span><span class='line'>    <span class="p">}</span>
</span><span class='line'>    <span class="k">return</span> <span class="n">self</span><span class="p">;</span>
</span><span class='line'><span class="p">}</span>
</span></code></pre></td></tr></table></div></figure>


<p>See More: <a href="">What&rsquo;s new in Table and Collection Views</a></p>

<h2>App Extensions</h2>

<p>可以写系统增强插件，例如在<code>Photo</code>中调用我们写的<code>Filter软件</code>或者<code>Share Extention</code></p>

<ul>
<li>Photo</li>
<li>Sharing</li>
<li>Notification Center Widgets</li>
<li>Action without UI</li>
<li>Document providers (向其他应用提供内容的Extension)</li>
<li>Custom keyboards</li>
</ul>


<p>See More: <a href="">Creating Extensions for iOS and OS X</a></p>

<h2>Notification Updates</h2>

<ul>
<li>不需要Show UI的Notification，不再需要用户的Permission</li>
<li>Notification可以进行用户交互</li>
<li>可以进行基于地理位置的Notification</li>
<li>payload size (256 bytes &ndash;> 1k)</li>
</ul>


<p>See More: <a href="">What&rsquo;s New in iOS Notifications</a></p>

<h2>Document Picker</h2>

<p>UIDocumentPickerViewController</p>

<p>System UI for selection documents</p>

<ul>
<li>Local documents</li>
<li>iCloud documents</li>
<li>Third-party document providers</li>
</ul>


<p>See more: <a href="">Building a Document-based App</a></p>

<h2>SDK Modernization</h2>

<ul>
<li>NS_DESIGNATED_INITIALIZER</li>
<li>id &ndash;> instancetype</li>
<li>Additional @properties</li>
</ul>


<h2>Handoff</h2>

<ul>
<li>通过Handoff用户可以在多设备之间共享操作</li>
<li>UIKit 和 AppKit 均支持 Handoff</li>
</ul>


<p>See More: <a href="">Adopting Handoff on iOS and OS X</a></p>

<h2>More Goodies in iOS</h2>

<h2>Photos</h2>

<ul>
<li>Photo Library 的读写权限</li>
<li>Custom CoreImage Filters</li>
</ul>


<p>See More: <a href="">Introducing the Photos Frameword</a></p>

<h2>CloudKit</h2>

<ul>
<li>更多的API，控制iCloud上的数据</li>
<li>创建一个 C/S App，无需搭设服务器</li>
</ul>


<p>See More: <a href="">Introducing CloudKit</a></p>

<h2>HealthKit</h2>

<p>See More: <a href="">Introducing HealthKit</a></p>

<h2>HomeKit</h2>

<p>See More: <a href="">Introducing HomeKit</a></p>

<h2>Local Authentication</h2>

<p>开放的指纹识别系统</p>

<ul>
<li>TouchID</li>
</ul>


<p>See More: <a href="">Keychain and Authentication with Touch ID</a></p>

<h2>SceneKit</h2>

<p>跨设备的3D渲染——For iOS</p>

<h2>Core Location</h2>

<ul>
<li>可以获得 Indoor Location，获得精确的楼层信息</li>
<li>更省电</li>
<li>当使用时获得用户的授权</li>
</ul>

]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Hello World]]></title>
    <link href="http://epingwang.github.io/blog/2014/06/10/hello-world/"/>
    <updated>2014-06-10T14:58:19+08:00</updated>
    <id>http://epingwang.github.io/blog/2014/06/10/hello-world</id>
    <content type="html"><![CDATA[<figure class='code'><div class="highlight"><table><tr><td class="gutter"><pre class="line-numbers"><span class='line-number'>1</span>
</pre></td><td class='code'><pre><code class=''><span class='line'>Hello world</span></code></pre></td></tr></table></div></figure>

]]></content>
  </entry>
  
</feed>
