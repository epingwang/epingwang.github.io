<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: WWDC | EpingWang's Blog]]></title>
  <link href="http://epingwang.me/blog/categories/wwdc/atom.xml" rel="self"/>
  <link href="http://epingwang.me/"/>
  <updated>2015-05-04T10:28:21+08:00</updated>
  <id>http://epingwang.me/</id>
  <author>
    <name><![CDATA[Eping Wang]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[Session 214 View Controller Advancements for iOS8 笔记]]></title>
    <link href="http://epingwang.me/blog/2014/06/11/session-214-view-controller-advancements-for-ios8-bi-ji/"/>
    <updated>2014-06-11T15:52:27+08:00</updated>
    <id>http://epingwang.me/blog/2014/06/11/session-214-view-controller-advancements-for-ios8-bi-ji</id>
    <content type="html"><![CDATA[<p>Session 214</p>

<p>Bruce D. Nilo</p>

<h2>OverView</h2>

<ul>
<li>A brief discussion about UIKit&rsquo;s new Adaptive APIs</li>
<li>New UISplitViewController features</li>
<li>Some new ways to condense and hide bars</li>
<li>Presentations and popovers</li>
<li>New API that uses transition coordinators</li>
<li>Coordinate spaces</li>
</ul>


<!--more-->


<h2>Support for Adaptive User Interfaces</h2>

<p>Universal App中，相同的页面会展示为不同的Layout</p>

<p>在iOS8之前，Layout取决于</p>

<ul>
<li>设备类型      Device type</li>
<li>设备方向      Interface Orientation</li>
<li>Window大小  Size</li>
</ul>


<p>iOS8之后:</p>

<ul>
<li>Traits and trait collections</li>
<li>Size</li>
</ul>


<h3>什么是 &ldquo;trait collection&rdquo;?</h3>

<p>Trait collection 是一个trait的集合</p>

<p>例如: 在一个竖屏的 iPhone5s 中</p>

<table>
<thead>
<tr>
<th>Trait </th>
<th> Value</th>
</tr>
</thead>
<tbody>
<tr>
<td>horizontalSizeClass </td>
<td> Compact</td>
</tr>
<tr>
<td>verticalSizeClass </td>
<td> Regular</td>
</tr>
<tr>
<td>userInterfaceIdiom </td>
<td> Phone</td>
</tr>
<tr>
<td>displayScale </td>
<td> 2.0</td>
</tr>
</tbody>
</table>


<h3>什么是 &ldquo;size class&rdquo;?</h3>

<ul>
<li>Size class 是简单定义<code>可用空间</code>的一个 <code>trait</code></li>
<li>可以定义在Horizontal方向和Vertical方向是Compact or Regular</li>
</ul>


<h3>Trait Environments</h3>

<p>在iOS8中, <code>UIView</code>和<code>UIViewController</code>均 conforms <code>&lt;UITraitEnvironment&gt;</code></p>

<p>``` objc
@protocol UITraitEnvironment <NSObject>
@property (nonatomic, readonly) UITraitCollection *traitCollection;</p>

<ul>
<li>(void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection;
```</li>
</ul>


<p>并不是每个View都有自己的TraitCollection，当获取<code>Leaf View</code>的<code>traitCollection</code>时，会沿着View的hierarchy找到最近的traitCollection</p>

<h2>Split View Controller</h2>

<p>UISplitViewControllers can now be used on the phone</p>

<p>新增了这个方法:</p>

<p><code>objc
@interface UISplitViewController : UIViewController
@property(nonatomic, readonly, getter=isCollapsed) BOOL collapsed  NS_AVAILABLE_IOS(8_0);
@end
</code></p>

<h4>Expanded split view controller</h4>

<p><img class="center" src="/images/2014/06/SplitViewController.jpg"></p>

<h4>Collapsed split view controller</h4>

<p><img class="center" src="/images/2014/06/SplitViewControllerCollapsed.jpg"></p>

<h3>在ViewController中添加SplitViewcontroller，并启用Collapse</h3>

<p><code>objc
svc.preferredDisplayMode = UISplitViewControllerDisplayModeAllVisible;
</code></p>

<h3>控制分栏的宽度</h3>

<p>通过以下几个属性</p>

<p><code>objc
@property(nonatomic, assign) CGFloat preferredPrimaryColumnWidthFraction NS_AVAILABLE_IOS(8_0);
@property(nonatomic, assign) CGFloat minimumPrimaryColumnWidth NS_AVAILABLE_IOS(8_0);
@property(nonatomic, assign) CGFloat maximumPrimaryColumnWidth NS_AVAILABLE_IOS(8_0);
@property(nonatomic,readonly) CGFloat primaryColumnWidth NS_AVAILABLE_IOS(8_0);
</code></p>

<h2>Condesing Bars</h2>

<p>现在隐藏NavigationBar和ToolBar变得相当简单，只需要以下几个属性</p>

<p>自动隐藏:</p>

<p><code>objc
@property (nonatomic, readwrite, assign) BOOL condensesBarsOnSwipe;
@property (nonatomic, readwrite, assign) BOOL condensesBarsWhenKeyboardAppears;
@property (nonatomic, readwrite, assign) BOOL hidesBarsWhenVerticallyCompact;
@property (nonatomic, readwrite, assign) BOOL hidesBarsOnTap;
@property (nonatomic, readonly, assign) UITapGestureRecognizer *barHideGestureRecognizer;
</code></p>

<p>手动控制:</p>

<p><code>objc
@property (nonatomic, readwrite, assign, getter = isNavigationBarCondensed) BOOL navigationBarCondensed;
</code></p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session 216 Building Adaptive Apps With UIKit]]></title>
    <link href="http://epingwang.me/blog/2014/06/10/session-216-building-adaptive-apps-with-uikit/"/>
    <updated>2014-06-10T17:32:04+08:00</updated>
    <id>http://epingwang.me/blog/2014/06/10/session-216-building-adaptive-apps-with-uikit</id>
    <content type="html"><![CDATA[<p>Session 216</p>

<p>Jacob Xiao</p>

<p>使用UIKit 创建 Universial App</p>

<!--more-->


<h2>Summary</h2>

<ul>
<li>Adaptive Concepts</li>
<li>View Controllers</li>
<li>Interface Builder</li>
</ul>


<h3>Size Classes</h3>

<p>之前区分设备方向，使用 <code>UIInterfaceOrientation</code>(iPhone) 和 <code>UIUserInterfaceIdiom</code>(iPad)</p>

<p>现在用 <code>Size Classes</code> 取代</p>

<p>在iPad上:</p>

<ul>
<li>Potrait: Regular Horizontal &amp; Regular Vertical</li>
<li>Landscape: Regular Horizontal &amp; Regular Vertical</li>
</ul>


<p>在iPhone上:</p>

<ul>
<li>Potrait: Compact Horizontal &amp; Regular Vertical</li>
<li>Landscape: Compact Hotizontal &amp; Compact Vertical</li>
</ul>


<h3>UITraitCollection</h3>

<h4>成员:</h4>

<p><code>objc
@property (nonatomic, readonly) UIUserInterfaceSizeClass horizontalSizeClass;
@property (nonatomic, readonly) UIUserInterfaceSizeClass verticalSizeClass;
@property (nonatomic, readonly) CGFloat displayScale;
@property (nonatomic, readonly) UIUserInterfaceIdiom userInterfaceIdiom;
</code></p>

<h4>Trait Environments</h4>

<ul>
<li>UIScreen</li>
<li>UIWindow</li>
<li>UIViewController</li>
<li>UIView</li>
<li>UIPresentationController</li>
</ul>


<p>所有层级共享同样的<code>UITraitCollection</code></p>

<p>当<code>TraitCollection</code>发生改变时，触发</p>

<p><code>objc
-(void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection;
</code>
重写这个方法来响应方向变化事件</p>

<h4>Trait Collections</h4>

<p>可以自己创建<code>UITraitCollection</code></p>

<p>可适用于横屏播放器之类的界面</p>

<p>可用于UITraitCollection的比较</p>

<p>``` objc</p>

<pre><code>UITraitCollection *collection = self.traitCollection;
UITraitCollection *newCollection = [UITraitCollection traitCollectionWithHorizontalSizeClass:UIUserInterfaceSizeClassCompact];
[collection containsTraitsInCollection:newCollection];
</code></pre>

<p>```</p>

<p>可以合并<code>UITraitCollection</code></p>

<p><code>objc
+ (UITraitCollection *)traitCollectionWithTraitsFromCollections:(NSArray *)traitCollections;
</code>
其中 <code>Compact</code> + <code>Regular</code> = <code>Regular</code></p>

<h3>Appearance Proxy</h3>

<p><code>objc
+(instancetype)appearanceForTraitCollection:(UITraitCollection *)trait;
</code></p>

<ul>
<li>Customize views for different traits</li>
<li>UIImage 可以响应这个方法，返回different version of image</li>
<li>UIImageAssets</li>
</ul>


<h3>Adaptive View Controllers</h3>

<h4>Split View Controller</h4>

<p>现在Split View Controller 是Universal的</p>

<h4>生命周期</h4>

<p>Setup开始时:</p>

<p><code>objc
-(void)willTransitionToTraitCollection:(UITraitCollection *)newCollection withTransitionCoordinator:(id&lt;UIViewControllerTransitionCoordinator&gt;)coordinator;
</code>
在这个方法可以自定义动画，并执行completion block，其顺序在下面方法之后。</p>

<p>Setup结束时:</p>

<p><code>objc
-(void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection;
</code></p>

<h4>Showing View Controllers</h4>

<p><code>objc
[self.navigationController pushViewController:...];
</code>
这个机制被废弃</p>

<p>取而代之的是</p>

<p>``` objc
&ndash; (void)showViewController:(UIViewController *)vc sender:(id)sender;</p>

<ul>
<li>(void)showDetailViewController:(UIViewController *)vc sender:(id)sender;
```</li>
</ul>


<p>这两个方法总是保证，无论当前ViewController被包含在<code>NavigationController</code>, <code>SplitViewController</code>, 还是没有被包含在任何ViewController中，都会有正确的表现。</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Session 202 What's New in Cocoa Touch 笔记]]></title>
    <link href="http://epingwang.me/blog/2014/06/10/session-202-whats-new-in-cocoa-touch-bi-ji/"/>
    <updated>2014-06-10T15:24:54+08:00</updated>
    <id>http://epingwang.me/blog/2014/06/10/session-202-whats-new-in-cocoa-touch-bi-ji</id>
    <content type="html"><![CDATA[<p>Session 202</p>

<p>Luke Hiesterman</p>

<p>Core idea iOS8 &ndash;> Adaptivity</p>

<!--more-->


<h2>Adaptive Layout</h2>

<p>Orientations, sizes, and margins</p>

<h3>Adaptive Interface Orientation</h3>

<p>Layout 不再关心设备的方向以及设备的类型，而只关心屏幕画布的尺寸</p>

<p>范例: UITraitCollection
成员属性:</p>

<ul>
<li>horizontalSizeClass</li>
<li>displayScale</li>
<li>userInterfaceIdiom</li>
<li>verticalSizeClass</li>
</ul>


<p>UIViewController Conforms to <code>UITraitEnviroment</code>
当屏幕尺寸变化（设备方向改变）时，会调用</p>

<p>``` objc
&ndash;(void)traitCollectionDidChange:(UITraitCollection *)previousTraitCollection
{</p>

<pre><code>// 使用Layout设置CollectionView
UITraitCollection *currentTraits = self.traitCollection;
UICollectionViewLayout *newLayout = currentTraits.horizontalSizeClass == UIUserInterfaceSizeClassCompact ? self.squaresLayout : self.rectanglesLayout;
[self.collectionView setCollectionViewLayout:newLayout animated:YES];
</code></pre>

<p>}
```</p>

<h3>Adaptive Margins</h3>

<p>UIViewController 的属性:</p>

<ul>
<li>bottomLayoutGuide</li>
<li>topLayoutGuide</li>
<li>leftLayoutGuide</li>
<li>rightLayoutGuide</li>
</ul>


<p>可以确定四个边界（不用计算Navigation、ToolBar的高度）</p>

<p>See More: <a href="http://epingwang.github.io/blog/2014/06/10/session-216-building-adaptive-apps-with-uikit/">Building Adaptive Apps with UIKit</a></p>

<h3>Adaptive View Controllers</h3>

<h4>Rotation Deprecations</h4>

<p>``` objc
&ndash;(void)willRotateToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;</p>

<p>&ndash;(void)willAnimateFirstHalfOfRotationToInterfaceOrientation:(UIInterfaceOrientation)toInterfaceOrientation duration:(NSTimeInterval)duration;</p>

<p>&ndash;(void)didRotateFromInterfaceOrientation:(UIInterfaceOrientation)fromInterfaceOrientation;</p>

<p>&ndash;(BOOL)shouldAutomaticallyForwardRotationMethods;</p>

<p>&ndash;(UIInterfaceOrientation)interfaceOrientation;</p>

<p>&ndash;(UIView *)rotatingFooterView;</p>

<p>&ndash;(UIView *)rotatingHeaderView;
```</p>

<p>取而代之的新方法:</p>

<p><code>objc
- (void)viewWillTransitionToSize:(CGSize)size withTransitionCoordinator:(id &lt;UIViewControllerTransitionCoordinator&gt;)coordinator NS_AVAILABLE_IOS(8_0);
</code></p>

<h3>Adaptive View Controller Hierarchies</h3>

<h4>UISplitViewController</h4>

<p>Primary &ndash; Secondary (TableView &ndash; Detail) 视图</p>

<p>现在可以用<code>Split View Controller - Detail View Controller</code></p>

<ul>
<li>全设备支持</li>
<li>处理 <code>primary-secondary</code> 样式的视图交互</li>
<li>增强的可定制性</li>
</ul>


<p>See more: <a href="">View Controller Advancements in iOS8</a></p>

<h3>Adaptive Presentations</h3>

<p>适应不同设备的 <code>弹出视图(Popovers)</code>、<code>SearchBar</code>、<code>警告(Alerts)</code></p>

<h4>Popovers</h4>

<p>iPad上不再需要<code>UIPopOverController</code>，<code>Popover</code>以后做为UIViewController的Style使用
在iPhone上显示为PresentViewController样式</p>

<h4>Search Results</h4>

<p><code>UISearchDisplayController</code> replaced by</p>

<p><code>UISearchController</code> &ndash;> <code>UIViewController</code> subclass</p>

<ul>
<li><p>可以使用UIViewController的一切特性</p></li>
<li><p>可以定制UISearchController的UI</p></li>
</ul>


<h4>Alerts</h4>

<p><code>UIAlertController</code> replaces <code>UIAlertView</code> and <code>UIActionSheet</code></p>

<p>UIAlertController 也是 UIViewController 的 subclass</p>

<p>See More: <a href="">A Look Inside Presentation Controllers</a></p>

<h2>Testing with the iOS Simulator</h2>

<p>Simulator 可以直接调整 Size</p>

<ul>
<li>Resizeable iPhone</li>
<li>Resizeable iPad</li>
</ul>


<h2>Visual Effects</h2>

<p>UIVisualEffectView</p>

<p>可以接收<code>UIEffect</code>，来影响View及Subview上的Layer</p>

<ul>
<li>UIBlurEffect</li>
<li>UIVibrancyEffect</li>
</ul>


<h2>Image Assets</h2>

<p>直接返回正确的图片
```
+ (UIImage <em>)imageNamed:(NSString </em>)name</p>

<pre><code>           inBundle:(NSBundle *)bundle
</code></pre>

<p>compatibleWithTraitCollection:(UITraitCollection *)traitCollection
```</p>

<h2>Condensing Bars</h2>

<p>当用户滚动Scroll时，Navigation Bar 变小</p>

<p>See More: <a href="">Creating Custom iOS User Interfaces</a></p>

<h2>Self-sizing Table Cells</h2>

<p><strong> cell的 <code>height</code> 将无需在 <code>heightForRowAtIndexPath:</code> 中实现 </strong></p>

<p>cell 可以自己计算它的尺寸</p>

<p>``` objc
&ndash; (instancetype)initWithStyle:(UITableViewCellStyle)style reuseIdentifier:(NSString *)reuseIdentifier
{</p>

<pre><code>self = [super initWithStyle:style reuseIdentifier:reuseIdentifier];
if (self) {
    [self.contentView addConstraints:[NSLayoutConstraint
                                      constraintsWithVisualFormat:@"V:|-myTextView-|"
                                      options:0
                                      metrics:nil
                                        views:NSDictionaryOfVariableBindings(_myTextView)]];

    [self.contentView addConstraints:[NSLayoutConstraint
                                      constraintsWithVisualFormat:@"H:|-myTextView-|"
                                      options:0
                                      metrics:nil
                                        views:NSDictionaryOfVariableBindings(_myTextView)]];
}
return self;
</code></pre>

<p>}
```</p>

<p>See More: <a href="">What&rsquo;s new in Table and Collection Views</a></p>

<h2>App Extensions</h2>

<p>可以写系统增强插件，例如在<code>Photo</code>中调用我们写的<code>Filter软件</code>或者<code>Share Extention</code></p>

<ul>
<li>Photo</li>
<li>Sharing</li>
<li>Notification Center Widgets</li>
<li>Action without UI</li>
<li>Document providers (向其他应用提供内容的Extension)</li>
<li>Custom keyboards</li>
</ul>


<p>See More: <a href="">Creating Extensions for iOS and OS X</a></p>

<h2>Notification Updates</h2>

<ul>
<li>不需要Show UI的Notification，不再需要用户的Permission</li>
<li>Notification可以进行用户交互</li>
<li>可以进行基于地理位置的Notification</li>
<li>payload size (256 bytes &ndash;> 1k)</li>
</ul>


<p>See More: <a href="">What&rsquo;s New in iOS Notifications</a></p>

<h2>Document Picker</h2>

<p>UIDocumentPickerViewController</p>

<p>System UI for selection documents</p>

<ul>
<li>Local documents</li>
<li>iCloud documents</li>
<li>Third-party document providers</li>
</ul>


<p>See more: <a href="">Building a Document-based App</a></p>

<h2>SDK Modernization</h2>

<ul>
<li>NS_DESIGNATED_INITIALIZER</li>
<li>id &ndash;> instancetype</li>
<li>Additional @properties</li>
</ul>


<h2>Handoff</h2>

<ul>
<li>通过Handoff用户可以在多设备之间共享操作</li>
<li>UIKit 和 AppKit 均支持 Handoff</li>
</ul>


<p>See More: <a href="">Adopting Handoff on iOS and OS X</a></p>

<h2>More Goodies in iOS</h2>

<h2>Photos</h2>

<ul>
<li>Photo Library 的读写权限</li>
<li>Custom CoreImage Filters</li>
</ul>


<p>See More: <a href="">Introducing the Photos Frameword</a></p>

<h2>CloudKit</h2>

<ul>
<li>更多的API，控制iCloud上的数据</li>
<li>创建一个 C/S App，无需搭设服务器</li>
</ul>


<p>See More: <a href="">Introducing CloudKit</a></p>

<h2>HealthKit</h2>

<p>See More: <a href="">Introducing HealthKit</a></p>

<h2>HomeKit</h2>

<p>See More: <a href="">Introducing HomeKit</a></p>

<h2>Local Authentication</h2>

<p>开放的指纹识别系统</p>

<ul>
<li>TouchID</li>
</ul>


<p>See More: <a href="">Keychain and Authentication with Touch ID</a></p>

<h2>SceneKit</h2>

<p>跨设备的3D渲染——For iOS</p>

<h2>Core Location</h2>

<ul>
<li>可以获得 Indoor Location，获得精确的楼层信息</li>
<li>更省电</li>
<li>当使用时获得用户的授权</li>
</ul>

]]></content>
  </entry>
  
</feed>
